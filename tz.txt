{
          'data': {
            'authToken': '123',
            'authProvider': authRequest.authProvider,
            'deviceId': authRequest.deviceId,
            'username': authRequest.username,
            'appleAuthCode': authRequest.appleAuthCode
          }
        }

authToken - уникальное скорее всего
authProvider - статическое с вариантами: googleAuth, appleAuth и тд
deviceId - нужно будет когда-нибудь, пока что просто поле
username - то что вернет нам сервис авторизации, может прийти дичь
appleAuthCode - что то на подобии authToken, но это идентификатор (ios only)


Возвращать должен 

{
    "access":"token",
    "user":{
        "name":"",
        "phone":"",
        "lang":""
    }
}

Авторизация будет происходить условно OneAuth, 
то есть пока не потеряли токен или не удалили прилку, новой авторизации не будет

Дальше, в хедерах обязательный ключ обмена serviceToken, не очень надёжно, но лучше чем ничего, 
все хедеры версия приложения, 

lang - возвращать информацию о ошибках и прочей лабуде в этом языке
versionApp - заложи версионность методов, например getUser() будет работать на v0.4 по одному сценарию, на версии v0.5 по другому
deviceId - потом для отладки полезен
os - потом для отладки полезен


curl --location 'https://домен.123/user/auth?lang=rus&versionApp=1.01&deviceId=iPhone&os=iOS' \
--header 'serviceToken: 123' \
--header 'Accept: application/json' \
--header 'Content-Type: application/json' \
--data '{
    "data": {
        "authToken": "123",
        "authProvider": "google",
        "deviceId": "androidPhone",
        "username": "Testname"
    }
}'

Основные фичи
- кастомный ответ
- локализация
- версионность методов